http://www.binarytides.com/socket-programming-c-linux-tutorial/

#!/usr/bin/python
from BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer
import urlparse, json

PORT_NUMBER = 8888

#This class will handles any incoming request from
#the browser 
class myHandler(BaseHTTPRequestHandler):
	returnedStatus = 0
	currentCommand = ''
	progress = 0

	def getValueOfParam(raw_string, param):
		## To be returned value
		value = ''
		endCommandIndex = '&'

		if (raw_string.find(param) > 0):
			## Cut short raw string.
			substring = raw_string[raw_string.find(ext):]
			if (substring.find(endCommandIndex) > 0):
				value = substring[(substring.find(ext)+len(ext)):substring.find(endCommandIndex)]
			else:
				value = substring[(substring.find(ext)+len(ext)):len(substring)]
		else:
			print(ext + "NOT found")

		print("(" + param + "," + value + ")")

		return value

	def do_OPTIONS(self):
        	self.send_response(200, "ok")
        	self.send_header('Access-Control-Allow-Credentials', 'true')
        	self.send_header('Access-Control-Allow-Origin', '*')
        	self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
		self.send_header("Access-Control-Allow-Headers", "X-Requested-With, Content-type, Accept")
		self.end_headers()
		return

	#Handler for the GET requests
	def do_HEAD(self):
		self.send_response(200)
        	self.send_header('Access-Control-Allow-Credentials', 'true')
        	self.send_header('Access-Control-Allow-Origin', '*')
        	self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
		self.send_header("Access-Control-Allow-Headers", "X-Requested-With, Content-Type")
##		self.send_header("Content-type", "application/x-www-form-urlencoded")
		self.send_header('Content-Type', 'application/json')
		self.end_headers()
		return

	def do_GET(self):
#		self.send_response(200)
#		self.send_header('Content-type','text/html')
#		self.end_headers()
		# Send the html message
		print("\n-----GET Request Start ----->\n")
		self.send_response(200)
        	self.send_header('Access-Control-Allow-Credentials', 'true')
        	self.send_header('Access-Control-Allow-Origin', '*')
        	self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
		self.send_header("Access-Control-Allow-Headers", "X-Requested-With, Content-type")
##		self.send_header("Content-type", "application/x-www-form-urlencoded")
		self.send_header('Content-Type', 'application/json')
		self.end_headers()

		request_path = self.path
		print("**Raw Request :" + request_path)


		#### STORE CURRENT COMMAND
		cls = self.__class__

#		ext = 'CMD='
#		value = self.getValueOfParam(request_path, ext)
#		if (len(value) > 0):
#			cls.currentCommand=value
			

	##	endCommandIndex = '&'
		## Check whether parameter is specified.
	##	if (request_path.find(ext) > 0):
	##		substring = request_path[request_path.find(ext):]
	##		fileNameOnly = substring[(substring.find(ext)+len(ext)):substring.find(endCommandIndex)]
	##		cls.currentCommand=fileNameOnly
	##		print(self.currentCommand + " stored")
	##	else:
	##		print(ext + "NOT found")



		### WRITE RESPONSE.
		self.wfile.write('result=%s\r' % self.returnedStatus)
		self.wfile.write('completePercentage=%d\r' % 100)
		self.wfile.write('camNum=%d\r' % 10)
		self.wfile.write('camIDList=%s\r' % '1,2,3,4,5,6,7,8,9,10')
		self.wfile.write('camModVerList=%s\r' % '1,2,3,4,5,6,7,8,9,10')
		self.wfile.write('camVerList=%s\r' % '1,2,3,4,5,6,7,8,9,10')
		self.wfile.write('versionUpList=%s\r' % '1,2,3,4,5,6,7,8,9,10')
		self.wfile.write('versionUpFileList=%s\r' % '1,2,3,4,5,6,7,8,9,10')
		
		self.wfile.write('camStatus=%s\r' % '1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,9.1')
		self.wfile.write('fileType=0')
		##thread.start_new_thread(self.asynchronousSend, (self.path, self.wfile,))
		#(self.asynchronousSend, (self.path, self.wfile,))
		##checker = 0
        ##while (checker < 5):
##            self.wfile.write("%i " % checker)
##            checker += 1
##		self.wfile.write("Hello World !")
##		self.wfile.write("<html><head><title>Title goes here.</title></head>")
##        	self.wfile.write("<body><p>This is a test.</p>")
		# If someone went to "http://something.somewhere.net/foo/bar/",
		# then s.path equals "/foo/bar/".
##		self.wfile.write("<p>You accessed path: %s</p>" % self.path)
##		self.wfile.write("</body></html>")
		return

	def do_POST(self):
		# Parse the form data posted
		# Begin the response
		print("\n-----POST Request Start ----->\n")
		raw_message = self.rfile.read(int(self.headers.getheader('Content-Length')))
		print("**Raw Request: " + raw_message)


		print("**Last command: " + self.currentCommand)

		print(raw_message)
		print("status to be returned:")
		print(self.returnedStatus)
		self.send_response(200)
        	self.send_header('Access-Control-Allow-Credentials', 'true')
        	self.send_header('Access-Control-Allow-Origin', '*')
        	self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
		self.send_header("Access-Control-Allow-Headers", "X-Requested-With, Content-type")
##		self.send_header("Content-type", "application/x-www-form-urlencoded")
		self.send_header('Content-Type', 'application/json')
		self.end_headers()
		self.wfile.write('result=%s\r' % self.returnedStatus)


###		self.wfile.write('camVerList=%s\r' % '1,2,3,4,5,6,7,8,9,10')
###		self.wfile.write('versionUpList=%s\r' % '1,2,3,4,5,6,7,8,9,10')
###		self.wfile.write('versionUpFileList=%s\r' % '1,2,3,4,5,6,7,8,9,10')
		
###		self.wfile.write('camStatus=%s\r' % '1.0,2.0,3.0,4.0,5.0,6.0,7.0,8.0,9.0,9.1')
###		self.wfile.write('fileType=0')

		cls = self.__class__
		print("==> Last command to handle:")
		print(self.currentCommand)
		## Get command name.
		ext = 'CMD='
		endCommandIndex = '&'
		fileNameOnly = raw_message[:raw_message.find(ext)]
		if (len(fileNameOnly)+1) < len(raw_message):
			fileNameOnly = raw_message[(raw_message.find(ext)+len(ext)):raw_message.find(endCommandIndex)]
			cls.currentCommand=fileNameOnly


		print("==> Current command to handle:")
		print(self.currentCommand)
		## Get command Status.
		ext = 'returnStatus='
		fileNameOnly = raw_message[:raw_message.find(ext)]
		if (len(fileNameOnly)+1) < len(raw_message):
			print('============ CHECKER ==========: ');
			print fileNameOnly
			fileNameOnly = raw_message[(raw_message.find(ext)+len(ext)):len(raw_message)]
##			cls = self.__class__
			cls.returnedStatus=fileNameOnly
			print self.returnedStatus
		else:
			print("Status request not found");


		## SendVersionUpFileList
		### fileType
		### versionUpList
		### versionUpFileList

		### camType
		### versionUpList
		### versionUpFileList

		### e.loaded
		### e.total

		### 

##		par = urlparse.parse_qs(urlparse.urlparse(raw_message).query)
##		self.returnedStatus = par['returnStatus']
		##    CCTVHTTPClient.post("VersionUpRequest", "returnStatus=-1", settingData);

##		self.wfile.write('Client: %s\n' % str(self.client_address))
##		self.wfile.write('User-agent: %s\n' % str(self.headers['user-agent']))
##		self.wfile.write('Path: %s\n' % self.path)
	        return

try:
	#Create a web server and define the handler to manage the
	#incoming request
	server = HTTPServer(('localhost', PORT_NUMBER), myHandler)
	print 'Started httpserver on port ' , PORT_NUMBER
	
	#Wait forever for incoming htto requests
	server.serve_forever()

except KeyboardInterrupt:
	print '^C received, shutting down the web server'
	server.socket.close()
